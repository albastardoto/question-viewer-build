{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Question","props","onClick","onDivClick","bind","number","className","name","image","alt","src","choices","map","choice","index","substring","key","App","console","log","idquestions","questions","question","id","useState","hidden","state","setState","filter","includes","Boolean","window","location","hostname","match","xhttp","XMLHttpRequest","data","onreadystatechange","this","readyState","status","JSON","parse","responseText","ReactDOM","render","document","getElementById","open","send","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mfA6BA,IAAMA,EAAW,SAAAC,GACf,OACE,yBACEC,QAASD,EAAME,WAAWC,U,EAAWH,EAAMI,QAC3CC,UAAU,YACV,4BAAKL,EAAMI,OAAS,MAAQJ,EAAMM,MACjCN,EAAMO,OACL,yBACEC,IAAKR,EAAMO,MACXF,UAAU,gBACVI,IAAK,yCAA2CT,EAAMO,QAIzDP,EAAMU,QAAQC,IAAI,SAACC,EAAQC,GAC1B,IAAIR,EAAY,SAIhB,MAH+B,MAA3BO,EAAOE,UAAU,EAAG,KACtBT,GAAa,kBAGb,wBAAIU,IAAKF,EAAOR,UAAWA,GACxBO,EAAOE,UAAU,QAOfE,EAvDf,SAAahB,GACXiB,QAAQC,IAAIlB,GACZ,IAAMmB,EAAcnB,EAAMoB,UAAUT,IAAI,SAACU,EAAUR,GACjD,O,qVAAO,CAAP,GAAWQ,EAAX,CAAqBC,GAAIT,MAHT,EAKQU,mBAAS,CACjCC,OAAQ,KANQ,mBAKXC,EALW,KAKJC,EALI,KAQlB,OACE,yBAAKrB,UAAU,OACZc,EACEQ,OAAO,SAACN,EAAUR,GAAX,OAAsBY,EAAMD,OAAOI,SAASf,KACnDF,IAAI,SAACU,EAAUR,GACd,OACE,kBAAC,EAAD,CACET,OAAQiB,EAASC,GACjBP,IAAKF,EACLP,KAAMe,EAASA,SACfX,QAASW,EAASX,QAClBH,MAAOc,EAASd,MAChBL,WAAY,SAAAa,GAAG,OAAIW,EAAS,CAACF,OAAO,GAAD,mBAAMC,EAAMD,QAAZ,CAAoBT,aCVjDc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAIC,EAAQ,IAAIC,eACZC,EAAO,GACXF,EAAMG,mBAAqB,WACD,IAApBC,KAAKC,YAAoC,MAAhBD,KAAKE,SAEhCJ,EAAOK,KAAKC,MAAMR,EAAMS,cACxBC,IAASC,OAAO,kBAAC,EAAD,CAAKzB,UAAWgB,IAAUU,SAASC,eAAe,WAQtEb,EAAMc,KACJ,MADF,uFAGE,GAEFd,EAAMe,ODwGA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.56004640.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nfunction App(props) {\n  console.log(props);\n  const idquestions = props.questions.map((question, index) => {\n    return {...question, id: index};\n  });\n  const [state, setState] = useState({\n    hidden: [],\n  });\n  return (\n    <div className=\"App\">\n      {idquestions\n        .filter((question, index) => !state.hidden.includes(index))\n        .map((question, index) => {\n          return (\n            <Question\n              number={question.id}\n              key={index}\n              name={question.question}\n              choices={question.choices}\n              image={question.image}\n              onDivClick={key => setState({hidden: [...state.hidden, key]})}\n            />\n          );\n        })}\n    </div>\n  );\n}\nconst Question = props => {\n  return (\n    <div\n      onClick={props.onDivClick.bind(this, props.number)}\n      className=\"question\">\n      <h2>{props.number + '.  ' + props.name}</h2>\n      {props.image && (\n        <img\n          alt={props.image}\n          className=\"questionImage\"\n          src={'http://www2.snca.lu/scripts/lusitStpd/' + props.image}\n        />\n      )}\n\n      {props.choices.map((choice, index) => {\n        let className = 'choice';\n        if (choice.substring(0, 1) === '1') {\n          className += ' correctChoice';\n        }\n        return (\n          <h3 key={index} className={className}>\n            {choice.substring(2)}\n          </h3>\n        );\n      })}\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar xhttp = new XMLHttpRequest();\nvar data = [];\nxhttp.onreadystatechange = function() {\n  if (this.readyState === 4 && this.status === 200) {\n    // Typical action to be performed when the document is ready:\n    data = JSON.parse(xhttp.responseText);\n    ReactDOM.render(<App questions={data} />, document.getElementById('root'));\n  }\n};\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nxhttp.open(\n  'GET',\n  `https://raw.githubusercontent.com/albastardoto/question-viewer/master/src/data.json`,\n  true,\n);\nxhttp.send();\nserviceWorker.unregister();\n"],"sourceRoot":""}